<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cinema.mypage.MypageDAO">

	<!-- 고객 정보 조회 (ID 기반) -->
	<select id="getCustomerInfo"
		resultType="com.cinema.mypage.CustomerDTO">
		SELECT id, uid, passwd, realname, nickname, email, address,
		favorite, mobile, tellecom, created, updated, birthday , fulladdress, post
		FROM customer
		WHERE id = #{param1}
	</select>

	<!-- 고객 정보 조회 (UID 기반) -->
	<select id="getCustomerInfoByUid"
		resultType="com.cinema.mypage.CustomerDTO">
		SELECT *
		FROM customer
		WHERE uid = #{param1}
	</select>

	<!-- 고객 정보 업데이트 -->
	<update id="updateCusInfo"
		parameterType="com.cinema.mypage.CustomerDTO">
		UPDATE customer
		SET
		passwd = #{passwd},
		nickname = #{nickname},
		email = #{email},
		address= #{address},
		fulladdress = #{fulladdress},
		favorite = #{favorite},
		mobile = #{mobile},
		tellecom = #{tellecom},
		updated = NOW(),
		birthday = #{birthday},
		profileimg = #{profileimg},
		post = #{post}
		WHERE id = #{id}
	</update>
	
	<!-- 고객 테이블에서 프로필 이미지 경로(profileimg)를 조회하는 쿼리 -->
	<select id="getProfileImage" resultType="String" parameterType="int">
    SELECT profileimg 
    FROM customer 
    WHERE id = #{id}
	</select>

	<!-- 고객 삭제 -->
	<delete id="deleteCustomer">
		DELETE FROM customer WHERE id = #{param1}
	</delete>

	<!-- 1:1 문의 목록 조회 (고객 ID 기반) -->
	<!-- <select id="getInquiryList"
		resultType="com.cinema.mypage.InquiryDTO">
		SELECT id, customer_id, title, content, answer, created,
		ancreated, current
		FROM inquiry
		WHERE customer_id = #{param1}
	</select> -->
	
	<!-- 페이징 기반 1:1 문의 목록 조회 -->
	<select id="getInquiryList" parameterType="map"
		resultType="com.cinema.mypage.InquiryDTO">
		SELECT *
		FROM inquiry
		WHERE customer_id = #{customerId}
		ORDER BY created DESC
		LIMIT #{offset}, #{limit}
	</select>

	<!-- 1:1 문의 작성 -->
	<insert id="inquiryWrite"
		parameterType="com.cinema.mypage.InquiryDTO">
		INSERT INTO inquiry
		SET customer_id = #{customer_id},
		title = #{title}, content = #{content}
	</insert>

	<!-- 1:1 문의 상세 조회 -->
	<select id="getInquiryDetail"
		resultType="com.cinema.mypage.InquiryDTO">
		SELECT title, content, answer, created, ancreated, current
		FROM inquiry
		WHERE id = #{param1}
	</select>
	
	<!-- 1:1 문의 페이징 -->
	<select id="getTotalInquiryCount" parameterType="int"
		resultType="int">
		SELECT COUNT(*)
		FROM inquiry
		WHERE customer_id =
		#{customerId}
	</select>

	<!-- 예매 목록 조회 (고객 ID 기반) -->
	<select id="getMovieList" parameterType="string"
		resultType="com.cinema.mypage.MovieGetDTO">
		SELECT *
		FROM moviepay

		WHERE customer_id = #{customer_id}
	</select>

	<!-- 예매 삭제 (ID 기반) -->
	<delete id="deleteMovieReservation" parameterType="int">
		DELETE FROM moviepay WHERE id = #{id}
	</delete>

	<!-- 예매 정보를 moviepaydelete 테이블로 이동 -->
	<insert id="moveToMovieDelete" parameterType="int">
		INSERT INTO moviepaydelete (id, random_id, customer_id, movie_name, room_name,
		totalprice, runningtime, seat, totalpeople, begintime, endtime,
		datetime, created)
		SELECT id, random_id, customer_id, movie_name, room_name, totalprice,
		runningtime, seat, totalpeople, begintime, endtime, datetime, created
		FROM moviepay
		WHERE id = #{id}
	</insert>

	<!-- 취소된 예매 내역 조회 (고객 ID 기반) -->
	<select id="getCanceledMovieList" parameterType="string"
		resultType="com.cinema.mypage.MovieGetDTO">
		SELECT *
		FROM moviepaydelete
		WHERE customer_id = #{customer_id}
	</select>

	<!-- 닉네임 업데이트 -->
	<update id="updateNickname">
		UPDATE customer
		SET nickname = #{nickname}
		WHERE uid = #{uid}
	</update>
	 <!-- 이미지 업데이트 -->
	 <update id="updateProfileImage">
        UPDATE customer
        SET profileimg = #{fileName} <!-- 프로필 이미지 컬럼 업데이트 -->
        WHERE id = #{userId} <!-- 사용자 ID로 조건 설정 -->
    </update>
    

	<!-- 예매 목록을 페이징 및 최신순 정렬로 가져오기 -->
	<select id="getMovieListWithPaging" parameterType="map"
		resultType="com.cinema.mypage.MovieGetDTO">
		SELECT *
		FROM moviepay
		WHERE customer_id = #{customer_id}
		ORDER BY datetime DESC  <!-- 최신순 정렬 -->
		LIMIT #{limit} OFFSET #{offset}  <!-- 페이징 처리 -->
	</select>

	<!-- 총 예매 수 구하기 -->
	<select id="getTotalReservationCount" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM moviepay
		WHERE customer_id = #{customer_id}
	</select>

	<!-- 취소된 예매 내역을 페이징 및 최신순 정렬로 가져오기 -->
	<select id="getCanceledMovieListWithPaging" parameterType="map"
		resultType="com.cinema.mypage.MovieGetDTO">
		SELECT * FROM moviepaydelete
		WHERE customer_id = #{customer_id}
		ORDER BY datetime DESC  <!-- 최신순 정렬 -->
		LIMIT #{limit} OFFSET #{offset}  <!-- 페이징 처리 -->
	</select>

	<!-- 총 취소 내역 수 구하기 -->
	<select id="getTotalCanceledReservationCount"
		parameterType="string" resultType="int">
		SELECT COUNT(*)
		FROM moviepaydelete
		WHERE customer_id = #{customer_id}
	</select>

	<!-- 최근 5건의 예매 목록을 최신순으로 가져오기 -->
	<select id="getRecentMovies" parameterType="string"
		resultType="com.cinema.mypage.MovieGetDTO">
		SELECT *
		FROM moviepay
		WHERE customer_id = #{customer_id}
		ORDER BY datetime DESC  <!-- 최신순 정렬 -->
		LIMIT 5  <!-- 최근 5건만 가져오기 -->
	</select>
	<!-- 예매 탑3가져오기 -->
	 <select id="getTop3MoviesByReservation" resultType="com.cinema.chart.chartDTO">
        SELECT id, mname, imagepath, reservation
        FROM movie
        ORDER BY reservation DESC
        LIMIT 3
    </select>
	
</mapper>